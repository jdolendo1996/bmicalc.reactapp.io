{"version":3,"sources":["components/Calculator.js","components/Android.js","components/ResultInfo.js","containers/App.js","serviceWorker.js","index.js"],"names":["Calculator","toggleChangeConv","onChecked","handleInputChange","onClicked","className","id","offLabel","onChange","checked","onLabel","Fragment","icon","label","name","type","large","node","waves","onClick","Android","sizeT","sizeH","style","width","ResultInfo","resultBMI","resultStatus","resultStatClr","setSizeT","setSizeH","color","App","event","setState","isChecked","state","value","target","result_bmi","kilograms","Math","pow","centimeters","toFixed","Number","pounds","feet","inches","isStatus","isStatClr","isSizeT","isSizeH","isBMI","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.7be046a8.chunk.js","sourcesContent":["import React from 'react';\r\nimport { TextInput, Icon, Switch, Button } from 'react-materialize';\r\n\r\nconst Calculator = ({toggleChangeConv, onChecked, handleInputChange, onClicked}) => {\r\n\r\n        return (\r\n                <form>\r\n                        <h2 className=\"lobster\">Check your BMI</h2>\r\n                        <div className=\"fl w-100 pa2\">\r\n                                <Switch\r\n                                id=\"toggleConv\"\r\n                                offLabel=\"Standard\"\r\n                                onChange={toggleChangeConv}\r\n                                checked={onChecked}\r\n                                onLabel=\"Metric\"\r\n                                />\r\n                        </div>\r\n                        \r\n                        <div className=\"lobster f3 fl w-100 pa2\">\r\n                                <div className=\"tl pl3 w-50 dib\">Height</div>\r\n                                <div className=\"w-50 dib\">Weight</div>\r\n                        </div>\r\n                        \r\n                        {!onChecked ?\r\n                                <React.Fragment>\r\n                                        <div className=\"fl w-third pa2\">\r\n                                        \r\n                                                <TextInput\r\n                                                        icon={<Icon>height</Icon>}\r\n                                                        id=\"feet\"\r\n                                                        label=\"feet\"\r\n                                                        name=\"feet\"\r\n                                                        type=\"number\"\r\n                                                        onChange={handleInputChange}\r\n                                                />\r\n                                        </div>\r\n                                        <div className=\"fl w-third pa2\">\r\n                                                <TextInput\r\n                                                        id=\"inches\"\r\n                                                        label=\"inches\"\r\n                                                        name=\"inches\"\r\n                                                        type=\"number\"\r\n                                                        onChange={handleInputChange}\r\n                                                />\r\n                                        </div>\r\n                                        <div className=\"fl w-third pa2\">\r\n                                                <TextInput\r\n                                                        icon={<Icon>fitness_center</Icon>}\r\n                                                        id=\"weight\"\r\n                                                        label=\"pounds\"\r\n                                                        name=\"pounds\"\r\n                                                        type=\"number\"\r\n                                                        onChange={handleInputChange}\r\n                                                />\r\n                                        </div>\r\n                                </React.Fragment>\r\n                          :\r\n                                <React.Fragment>\r\n                                        <div className=\"fl w-50 pa2\">\r\n                                        \r\n                                                <TextInput\r\n                                                        icon={<Icon>height</Icon>}\r\n                                                        id=\"centimeters\"\r\n                                                        label=\"centimeters\"\r\n                                                        name=\"centimeters\"\r\n                                                        type=\"number\"\r\n                                                        onChange={handleInputChange}\r\n                                                />\r\n                                        </div>\r\n                                        <div className=\"fl w-50 pa2\">\r\n                                                <TextInput\r\n                                                        icon={<Icon>fitness_center</Icon>}\r\n                                                        id=\"kilograms\"\r\n                                                        label=\"kilograms\"\r\n                                                        name=\"kilograms\"\r\n                                                        type=\"number\"\r\n                                                        onChange={handleInputChange}\r\n                                                />\r\n                                        </div>\r\n                                </React.Fragment>\r\n                        }\r\n                       \r\n                        <div className=\"fl w-100 pa2 pb4\">\r\n                                <Button\r\n                                large\r\n                                node=\"a\"\r\n                                waves=\"light\"\r\n                                className=\"btn\"\r\n                                onClick={onClicked}\r\n                                >\r\n                                Compute\r\n                                </Button>\r\n                        </div>\r\n                </form>\r\n        );\r\n}\r\n\r\n\r\n\r\nexport default Calculator;","import React from 'react';\r\n\r\nconst Android = ({sizeT,sizeH}) => {\r\n    return (\r\n        <div className=\"robots\">\r\n            <div className=\"android\"> \r\n                <div style={{width:sizeH}} className=\"head\"> \r\n                    <div className=\"eyes\"> \r\n                        <div className=\"left_eye\"></div> \r\n                        <div className=\"right_eye\"></div>\r\n                    </div> \r\n                </div> \r\n                <div className=\"upper_body\"> \r\n                    <div className=\"left_arm\"></div> \r\n                    <div style={{width:sizeT}} className=\"torso\"></div> \r\n                    <div className=\"right_arm\"></div> \r\n                </div> \r\n                <div className=\"lower_body\"> \r\n                    <div className=\"left_leg\"></div> \r\n                    <div className=\"right_leg\"></div> \r\n                </div> \r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Android;","import React from 'react';\r\nimport Android from './Android';\r\n\r\nconst ResultInfo = ({resultBMI,resultStatus,resultStatClr,setSizeT,setSizeH}) => {\r\n    return (\r\n        <div className=\"result-info-box br3 br--right\">\r\n           <div className=\"fl w-100 pb3\"><h4 className=\"lobster\">Result</h4></div>\r\n           <div className=\"fl w-100 pb3\">\r\n                 <Android sizeT={setSizeT} sizeH={setSizeH}></Android>\r\n           </div>\r\n            <div className=\"fl w-100 pb3\">\r\n                <div className=\"dib pr3\">\r\n                <h5><b className=\"lobster\">Status</b>: <b style={{color:resultStatClr}}>{(!resultStatus) ? 'TBD': resultStatus}</b></h5>\r\n                </div>\r\n                <div className=\"dib pl3\">\r\n                    <h5><b className=\"lobster\">BMI</b> = {resultBMI}</h5>\r\n                </div>\r\n            </div>\r\n            <div className=\"fl w-100 pb3\">\r\n                <div className=\"w-80 grow tc bg-white dib br3 bw-2 shadow-5\">\r\n                    <h5 className=\"lobster\">BMI Categories</h5>\r\n                    <ul>\r\n                    <li>{`Underweight = < 18.5`}</li>\r\n                    <li>{`Normal weight = 18.5–24.9`}</li>\r\n                    <li>{`Overweight = 25–29.9`}</li>\r\n                    <li>{`Obesity = BMI of 30 or greater`}</li>\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ResultInfo;","import React, {Component} from 'react';\r\nimport Calculator from '../components/Calculator';\r\nimport ResultInfo from '../components/ResultInfo';\r\n\r\nclass App extends Component {\r\n\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            isChecked: false,\r\n            isBMI:0,\r\n            isStatus:'',\r\n            isStatClr:'',\r\n            isSizeT:'',\r\n            isSizeH:''\r\n        };\r\n    }\r\n   \r\n\r\n    toggleChangeConv = (event) => {\r\n        this.setState({ isChecked: (!this.state.isChecked) ? true : false});\r\n    }\r\n   \r\n    handleInputChange = (event) => {\r\n        const value =  event.target.value;\r\n        const name  =  event.target.name;\r\n        this.setState({\r\n            [name]: value\r\n        });\r\n    }\r\n\r\n    onClicked = (event) => {\r\n        \r\n        let result_bmi = 0;\r\n\r\n        //CALCULATE BMI\r\n        if(this.state.isChecked){\r\n           result_bmi = (this.state.kilograms / Math.pow((this.state.centimeters/100), 2)).toFixed(1);\r\n        }else{\r\n           result_bmi = ((703 * Number(this.state.pounds)) / Math.pow((Number(this.state.feet) * 12) + Number(this.state.inches), 2)).toFixed(1);\r\n        }\r\n\r\n        //GET STATUS\r\n        if(result_bmi  < 18.5){\r\n            this.setState({isStatus : 'Underweight', isStatClr: '#00FFFF', isSizeT: '150px', isSizeH: '150px'}); \r\n        }else if( ( result_bmi >= 18.5) && (result_bmi <= 24.9) ){\r\n            this.setState({isStatus : 'Normal Weight', isStatClr: '#7CFC00', isSizeT: '200px', isSizeH: '163px'}); \r\n        }else if( ( result_bmi >= 25) && (result_bmi <= 29.9) ){\r\n            this.setState({isStatus : 'Overweight', isStatClr: '#663399', isSizeT: '500px', isSizeH: '210px'}); \r\n        }else{\r\n            this.setState({isStatus : 'Obesity', isStatClr: '#B22222', isSizeT: '500px', isSizeH: '210px'}); \r\n        }\r\n\r\n        this.setState({isBMI : result_bmi}); \r\n    }\r\n   \r\n\r\n    render(){\r\n        \r\n        return(\r\n            \r\n            <div className=\"h-auto tc bg-white dib br3 ma5 bw-2 shadow-5 \">\r\n                <div className=\"box-grid\">\r\n                    <Calculator \r\n                        toggleChangeConv={this.toggleChangeConv} \r\n                        onChecked={this.state.isChecked}\r\n                        handleInputChange={this.handleInputChange}\r\n                        onClicked={this.onClicked}\r\n                    >\r\n                    </Calculator>\r\n                    <ResultInfo\r\n                        resultBMI={this.state.isBMI}\r\n                        resultStatus={this.state.isStatus}\r\n                        resultStatClr={this.state.isStatClr}\r\n                        setSizeT={this.state.isSizeT}\r\n                        setSizeH={this.state.isSizeH}\r\n                    ></ResultInfo>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport 'materialize-css/dist/css/materialize.min.css';\nimport 'materialize-css/dist/js/materialize.min.js';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}